// Code generated by go-swagger; DO NOT EDIT.

package generic_project_file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new generic project file API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for generic project file API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GenericProjectFileConfirm confirms a generic project file upload

This is the last step of uploading a generic project file to Bitrise. Confirm the generic project file upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the upload](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#confirming-the-file-upload) guide.
*/
func (a *Client) GenericProjectFileConfirm(params *GenericProjectFileConfirmParams, authInfo runtime.ClientAuthInfoWriter) (*GenericProjectFileConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenericProjectFileConfirmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generic-project-file-confirm",
		Method:             "POST",
		PathPattern:        "/apps/{app-slug}/generic-project-files/{generic-project-file-slug}/uploaded",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenericProjectFileConfirmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GenericProjectFileConfirmOK), nil

}

/*
GenericProjectFileDelete deletes a generic project file

Delete an app's generic project file. You can fetch an app's generic project file slug if you first list all the uploaded files with the [GET /apps/{app-slug}/generic-project-files](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-list) endpoint. Read more in our [Deleting a file](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#deleting-a-file) guide.
*/
func (a *Client) GenericProjectFileDelete(params *GenericProjectFileDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*GenericProjectFileDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenericProjectFileDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generic-project-file-delete",
		Method:             "DELETE",
		PathPattern:        "/apps/{app-slug}/generic-project-files/{generic-project-file-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenericProjectFileDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GenericProjectFileDeleteOK), nil

}

/*
GenericProjectFileList gets a list of the generic project files

List all the generic project files that have been uploaded to a specific app. Read more in our [Listing the uploaded files of an app](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#listing-the-uploaded-files-of-an-app) guide.
*/
func (a *Client) GenericProjectFileList(params *GenericProjectFileListParams, authInfo runtime.ClientAuthInfoWriter) (*GenericProjectFileListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenericProjectFileListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generic-project-file-list",
		Method:             "GET",
		PathPattern:        "/apps/{app-slug}/generic-project-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenericProjectFileListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GenericProjectFileListOK), nil

}

/*
GenericProjectFileShow gets a specific generic project file

Retrieve data of a specific generic project file to check its attributes and optionally modify them with the [PATCH /apps/](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-update) endpoint. Read more in our [Retrieving a specific file's data](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#retrieving-a-specific-files-data) guide.
*/
func (a *Client) GenericProjectFileShow(params *GenericProjectFileShowParams, authInfo runtime.ClientAuthInfoWriter) (*GenericProjectFileShowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenericProjectFileShowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generic-project-file-show",
		Method:             "GET",
		PathPattern:        "/apps/{app-slug}/generic-project-files/{generic-project-file-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenericProjectFileShowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GenericProjectFileShowOK), nil

}

/*
GenericProjectFileUpdate updates a generic project file

Update a generic project file's attributes. You can fetch an app's generic project file slug if you first list all the uploaded files with the [GET /apps/{app-slug}/generic-project-files](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-list) endpoint. Read more in our [Updating an uploaded file](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#updating-an-uploaded-file) guide.
*/
func (a *Client) GenericProjectFileUpdate(params *GenericProjectFileUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*GenericProjectFileUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenericProjectFileUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generic-project-file-update",
		Method:             "PATCH",
		PathPattern:        "/apps/{app-slug}/generic-project-files/{generic-project-file-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenericProjectFileUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GenericProjectFileUpdateOK), nil

}

/*
GenericProjectFilesCreate creates a generic project file

Create a temporary pre-signed upload URL (expires in 10 minutes) for the generic project file and upload it to AWS with a simple `curl` request. To complete the uploading process and view your files on the Code Signing tab of your app, continue with the [POST /apps/{app-slug}/generic-project-files/{generic-project-file-slug}/uploaded](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-confirm) endpoint. Read more in our [Creating and uploading files to Generic File Storage](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#creating-and-uploading-files-to-generic-file-storage) guide.
*/
func (a *Client) GenericProjectFilesCreate(params *GenericProjectFilesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*GenericProjectFilesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenericProjectFilesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generic-project-files-create",
		Method:             "POST",
		PathPattern:        "/apps/{app-slug}/generic-project-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenericProjectFilesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GenericProjectFilesCreateCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
