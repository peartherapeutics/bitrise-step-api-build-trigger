// Code generated by go-swagger; DO NOT EDIT.

package build_artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/peartherapeutics/bitrise-step-api-build-trigger/models"
)

// ArtifactDeleteReader is a Reader for the ArtifactDelete structure.
type ArtifactDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ArtifactDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewArtifactDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewArtifactDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewArtifactDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewArtifactDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewArtifactDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewArtifactDeleteOK creates a ArtifactDeleteOK with default headers values
func NewArtifactDeleteOK() *ArtifactDeleteOK {
	return &ArtifactDeleteOK{}
}

/*ArtifactDeleteOK handles this case with default header values.

OK
*/
type ArtifactDeleteOK struct {
	Payload *models.V0ArtifactDeleteResponseModel
}

func (o *ArtifactDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactDeleteOK  %+v", 200, o.Payload)
}

func (o *ArtifactDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V0ArtifactDeleteResponseModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArtifactDeleteBadRequest creates a ArtifactDeleteBadRequest with default headers values
func NewArtifactDeleteBadRequest() *ArtifactDeleteBadRequest {
	return &ArtifactDeleteBadRequest{}
}

/*ArtifactDeleteBadRequest handles this case with default header values.

Bad Request
*/
type ArtifactDeleteBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

func (o *ArtifactDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *ArtifactDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArtifactDeleteUnauthorized creates a ArtifactDeleteUnauthorized with default headers values
func NewArtifactDeleteUnauthorized() *ArtifactDeleteUnauthorized {
	return &ArtifactDeleteUnauthorized{}
}

/*ArtifactDeleteUnauthorized handles this case with default header values.

Unauthorized
*/
type ArtifactDeleteUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

func (o *ArtifactDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactDeleteUnauthorized  %+v", 401, o.Payload)
}

func (o *ArtifactDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArtifactDeleteNotFound creates a ArtifactDeleteNotFound with default headers values
func NewArtifactDeleteNotFound() *ArtifactDeleteNotFound {
	return &ArtifactDeleteNotFound{}
}

/*ArtifactDeleteNotFound handles this case with default header values.

Not Found
*/
type ArtifactDeleteNotFound struct {
	Payload *models.ServiceStandardErrorRespModel
}

func (o *ArtifactDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactDeleteNotFound  %+v", 404, o.Payload)
}

func (o *ArtifactDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArtifactDeleteInternalServerError creates a ArtifactDeleteInternalServerError with default headers values
func NewArtifactDeleteInternalServerError() *ArtifactDeleteInternalServerError {
	return &ArtifactDeleteInternalServerError{}
}

/*ArtifactDeleteInternalServerError handles this case with default header values.

Internal Server Error
*/
type ArtifactDeleteInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

func (o *ArtifactDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *ArtifactDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
