// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAppListParams creates a new AppListParams object
// with the default values initialized.
func NewAppListParams() *AppListParams {
	var ()
	return &AppListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAppListParamsWithTimeout creates a new AppListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAppListParamsWithTimeout(timeout time.Duration) *AppListParams {
	var ()
	return &AppListParams{

		timeout: timeout,
	}
}

// NewAppListParamsWithContext creates a new AppListParams object
// with the default values initialized, and the ability to set a context for a request
func NewAppListParamsWithContext(ctx context.Context) *AppListParams {
	var ()
	return &AppListParams{

		Context: ctx,
	}
}

// NewAppListParamsWithHTTPClient creates a new AppListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAppListParamsWithHTTPClient(client *http.Client) *AppListParams {
	var ()
	return &AppListParams{
		HTTPClient: client,
	}
}

/*AppListParams contains all the parameters to send to the API endpoint
for the app list operation typically these are written to a http.Request
*/
type AppListParams struct {

	/*Limit
	  Max number of elements per page (default: 50)

	*/
	Limit *int64
	/*Next
	  Slug of the first app in the response

	*/
	Next *string
	/*SortBy
	  Order of the applications: sort them based on when they were created or the time of their last build

	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the app list params
func (o *AppListParams) WithTimeout(timeout time.Duration) *AppListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the app list params
func (o *AppListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the app list params
func (o *AppListParams) WithContext(ctx context.Context) *AppListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the app list params
func (o *AppListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the app list params
func (o *AppListParams) WithHTTPClient(client *http.Client) *AppListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the app list params
func (o *AppListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the app list params
func (o *AppListParams) WithLimit(limit *int64) *AppListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the app list params
func (o *AppListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNext adds the next to the app list params
func (o *AppListParams) WithNext(next *string) *AppListParams {
	o.SetNext(next)
	return o
}

// SetNext adds the next to the app list params
func (o *AppListParams) SetNext(next *string) {
	o.Next = next
}

// WithSortBy adds the sortBy to the app list params
func (o *AppListParams) WithSortBy(sortBy *string) *AppListParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the app list params
func (o *AppListParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *AppListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Next != nil {

		// query param next
		var qrNext string
		if o.Next != nil {
			qrNext = *o.Next
		}
		qNext := qrNext
		if qNext != "" {
			if err := r.SetQueryParam("next", qNext); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sort_by
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sort_by", qSortBy); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
