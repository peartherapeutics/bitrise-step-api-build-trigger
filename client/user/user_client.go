// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
UserPlan thes subscription plan of the user

Get the subscription of the user: the current plan, any pending plans, and the duration of a trial period if applicable
*/
func (a *Client) UserPlan(params *UserPlanParams, authInfo runtime.ClientAuthInfoWriter) (*UserPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user-plan",
		Method:             "GET",
		PathPattern:        "/me/plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserPlanOK), nil

}

/*
UserProfile gets your profile data

Shows the authenticated users profile data
*/
func (a *Client) UserProfile(params *UserProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user-profile",
		Method:             "GET",
		PathPattern:        "/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserProfileOK), nil

}

/*
UserShow gets a specific user

Show information about a specific user
*/
func (a *Client) UserShow(params *UserShowParams, authInfo runtime.ClientAuthInfoWriter) (*UserShowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserShowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user-show",
		Method:             "GET",
		PathPattern:        "/users/{user-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserShowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserShowOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
