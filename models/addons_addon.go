// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AddonsAddon addons addon
// swagger:model addons.Addon
type AddonsAddon struct {

	// banner image
	BannerImage string `json:"banner_image,omitempty"`

	// card header colors
	CardHeaderColors []string `json:"card_header_colors"`

	// categories
	Categories []string `json:"categories"`

	// dashboard url
	DashboardURL string `json:"dashboard_url,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// developer links
	DeveloperLinks []*AddonsDeveloperLink `json:"developer_links"`

	// documentation url
	DocumentationURL string `json:"documentation_url,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// plans
	Plans []*AddonsPlan `json:"plans"`

	// platforms
	Platforms []string `json:"platforms"`

	// preview images
	PreviewImages []string `json:"preview_images"`

	// setup guide
	SetupGuide string `json:"setup_guide,omitempty"`

	// subtitle
	Subtitle string `json:"subtitle,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this addons addon
func (m *AddonsAddon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeveloperLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlans(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddonsAddon) validateDeveloperLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.DeveloperLinks) { // not required
		return nil
	}

	for i := 0; i < len(m.DeveloperLinks); i++ {
		if swag.IsZero(m.DeveloperLinks[i]) { // not required
			continue
		}

		if m.DeveloperLinks[i] != nil {
			if err := m.DeveloperLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("developer_links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AddonsAddon) validatePlans(formats strfmt.Registry) error {

	if swag.IsZero(m.Plans) { // not required
		return nil
	}

	for i := 0; i < len(m.Plans); i++ {
		if swag.IsZero(m.Plans[i]) { // not required
			continue
		}

		if m.Plans[i] != nil {
			if err := m.Plans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddonsAddon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddonsAddon) UnmarshalBinary(b []byte) error {
	var res AddonsAddon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
